%Thrust Interpolation Model 
%By Brian Trybus 4-11-2021 - ID: 109538512

%% Define Inputs

%Inital Inputs
bottleDia = 0.105; %m
massDry = 0.160; %kg
massProp = .6; %kg
launchAngle = 45;
coDrag = 0.3;
windSpeed = 8; %mph ahh
windDriction = 185; %11.25; 
rhoAmb = 0.961;%kg/m^3

%% Find ISP using code from eailer in the lab from Authors: Sean Svihla, Devon Paris, Garrett Lycett, Daniel Smith, Luca Herlein, Brian Trybus

    %% Load Files

    stsfiles = dir('stsdata');

    %% Declare Variables

    g = 9.81;

    sampleRate = 1652; %[Hz]

    samples = repmat(struct('data', [], 'tspan', [], 'bounds', []), ...
        length(stsfiles)-2, 1);

    % calcs = [Isp, maxThrust, timeOfThrust]
    calcs = zeros(length(stsfiles)-2, 3);

    %% Specific Impulse Computations

    thrustTemp = load('LA_Demo_S013_test2_600g');
    thrust = thrustTemp(:,3);
    lowerBound = 3484;
    upperBound = 3880;
    thrustUsed = thrust(lowerBound:upperBound);
    
    
    
    for i = 3:length(stsfiles)    
        % Load data
        csv = strcat(stsfiles(i).folder, '\', stsfiles(i).name);
        data = convforce(load(csv), 'lbf', 'N');

        % Get timespan
        tspan = ((1:length(data(:, 3)))./sampleRate)';

        % Get maximum thrust
        [maxThrust, maxIdx] = max(data(:, 3));

        % Get bounds of integration
        fileName = strcat('bounds/dataset', num2str(i-2), '.txt');
        if isfile(fileName)
        % Bounds have been saved---read bounds
            bounds = load(fileName);
        else
        % Bounds have not been saved---compute and write bounds
            tic

            % Display current item
            disp(strcat('Currently working on data-set #', num2str(i-2), '/', ...
                num2str(length(stsfiles)-2)))

            % Primary bounds---change in variance
            % Note: MaxNumChanges = 5 for #6, 17
            %                     = 4 for #10, 13, 16
            %                     = 3 otherwise
            chngIdx = find(ischange(data(:, 3), 'variance', ... 
                'MaxNumChanges', 3)); 

            if chngIdx(2) > maxIdx
                endBound = chngIdx(2);
            else
                endBound = chngIdx(3);
            end

            % Secondary bounds---remove negatives
            if any(data(chngIdx(1):maxIdx, 3) < 0)
                negIdx = find(data(chngIdx(1):maxIdx, 3) < 0) + chngIdx(1);
                beginBound = negIdx(end);
            else
                beginBound = chngIdx(1);
            end

            % Write bounds
            bounds = [beginBound, endBound];
            writematrix(bounds, fileName)

            toc
        end

        % Get timeOfThrust
        timeOfThrust = tspan(bounds(2)) - tspan(bounds(1));

        % Compute Isp---mass of water is 1 kg
        I = trapz(tspan(bounds(1):bounds(2)), data(bounds(1):bounds(2), 3)) ...
            - (1/2)*timeOfThrust*(data(bounds(2), 3) - data(bounds(1), 3));
        Isp = I/g;

            % Assign to samples
        samples(i-2) = struct(...
            'data', data(:, 3), ...
            'tspan', tspan, ...
            'bounds', bounds ...
            );

        % Assign to calcs
        calcs(i-2, :) = [Isp, maxThrust, timeOfThrust];
    end

%% Define Intial Conditions

g = -9.81; %m/s^2

% Calculate deltaV

deltaV = Isp*g*log(massDry/(massDry+massProp));
Vint = deltaV*[0,cosd(launchAngle),sind(launchAngle)];
pos = [0,0,0];
state = [pos,Vint];

initalCon.wind = (windSpeed/ 2.237)*[sind(windDriction),cosd(windDriction),0];
initalCon.cd = coDrag;
initalCon.launchAngle = launchAngle;
initalCon.mass = massDry;
initalCon.g = g;
initalCon.rho = rhoAmb;
initalCon.bottleDie = bottleDia;

%% Run ODE45

options = odeset('Events', @myEvent);

[~,s] = ode45(@(t,u) RocketFlight(u,initalCon),[0,5],state,options);

smaples = 200;

impact = zeros(smaples,2);

for n = 1:smaples 
    
    
    massDry = 0.128+normrnd(0,0.001); %kg
    massProp = 1.001+normrnd(0,0.001); %kg
    launchAngle = 45+normrnd(0,1);
    coDrag = 0.38+normrnd(0,0.03);
    windSpeed = 3 + normrnd(0,0.5); %mph ahh
    windDriction = 185 + normrnd(0,11.25); %11.25; 
    
    deltaV = Isp*g*log(massDry/(massDry+massProp));
    Vint = deltaV*[0,cosd(launchAngle),sind(launchAngle)];
    pos = [0,0,0];
    state = [pos,Vint];

    initalCon.wind = (windSpeed/ 2.237)*[sind(windDriction),cosd(windDriction),0];
    initalCon.cd = coDrag;
    initalCon.launchAngle = launchAngle;
    initalCon.mass = massDry;
    
    
    [~,s] = ode45(@(t,u) RocketFlight(u,initalCon),[0,5],state,options);
    
    
    
    impact(n,1) = s(length(s),1);
    impact(n,2) = s(length(s),2);
    
    
end
%% Plot error

x = impact(:,1);
y = impact(:,2);
figure; plot(x,y,'k.','markersize',6)
axis equal; grid on; xlabel('x [m]'); ylabel('y [m]'); hold on;
 
% Calculate covariance matrix
P = cov(x,y);
mean_x = mean(x);
mean_y = mean(y);
 
% Calculate the define the error ellipses
n=100; % Number of points around ellipse
p=0:pi/n:2*pi; % angles around a circle
 
[eigvec,eigval] = eig(P); % Compute eigen-stuff
xy_vect = [cos(p'),sin(p')] * sqrt(eigval) * eigvec'; % Transformation
x_vect = xy_vect(:,1);
y_vect = xy_vect(:,2);
 
% Plot the error ellipses overlaid on the same figure
plot(1*x_vect+mean_x, 1*y_vect+mean_y, 'b')
plot(2*x_vect+mean_x, 2*y_vect+mean_y, 'g')
plot(3*x_vect+mean_x, 3*y_vect+mean_y, 'r')
title('200 Flight Impacts()');



%% ODE setup

function [value, isterminal, direction] = myEvent(t, A)
    %Stop ODE at ground
    value      = (A(3) <= 0);
    isterminal = 1;   % Stop the integration
    direction  = 0;

end
